{"version":3,"sources":["components/attractions.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Attraction","props","attractions","name","description","website","Attractions","state","axios","get","then","response","setState","data","console","log","catch","error","this","map","currentAttraction","exercise","key","_id","className","attractionsList","Component","navbar","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kRAIMA,EAAa,SAACC,GAChB,OACE,4BACE,4BAAKA,EAAMC,YAAYC,MACvB,4BAAKF,EAAMC,YAAYE,aACvB,4BAAKH,EAAMC,YAAYG,WAeVC,E,kDACnB,WAAYL,GAAO,IAAD,8BAChB,cAAMA,IAEDM,MAAM,CACTL,YAAa,IAJC,E,gEAOE,IAAD,OACjBM,IAAMC,IAAI,sCACPC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZV,YAAaS,EAASE,OAExBC,QAAQC,IAAI,gCAEbC,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,wCAKhB,OAAOC,KAAKX,MAAML,YAAYiB,KAAI,SAACC,GACjC,OAAO,kBAAC,EAAD,CACLC,SAAYD,EACZE,IAAKF,EAAkBG,W,+BAK3B,OACE,6BACE,2CACA,2BAAOC,UAAU,SACf,2BAAOA,UAAU,eACf,4BACE,oCACA,2CACA,yCAKJ,+BACGN,KAAKO,yB,GA5CuBC,aCrBpBC,E,uKAEb,OACI,yBAAKH,UAAU,+CACX,kBAAC,IAAD,CAAMI,GAAG,IAAIJ,UAAU,gBAAvB,sBACA,yBAAKA,UAAU,4BACX,wBAAIA,UAAU,sBACV,wBAAIA,UAAU,eACV,kBAAC,IAAD,CAAMI,GAAG,IAAIJ,UAAU,YAAvB,SAEJ,wBAAIA,UAAU,eACV,kBAAC,IAAD,CAAMI,GAAG,eAAeJ,UAAU,YAAlC,uB,GAXQE,aCkBrBG,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,CAAOM,KAAK,IAAIC,OAAK,IACrB,kBAAC,IAAD,CAAOD,KAAK,eAAeE,UAAW1B,OCF1B2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM+B,c","file":"static/js/main.49d5ccdf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n// Single Exercise Component\nconst Attraction = (props) => {\n    return (\n      <tr>\n        <td>{props.attractions.name}</td>\n        <td>{props.attractions.description}</td>\n        <td>{props.attractions.website}</td>\n        {/* <td>{props.exercise.date.substring(0,10)}</td>\n        <td>\n          <Link to={\"/edit/\" + props.exercise._id}>edit</Link>|{\" \"}\n          <a \n          href=\"#\"\n          onClick={() =>{props.deleteExercise(props.exercise._id)}}\n          >\n            delete\n          </a>\n        </td> */}\n      </tr>\n    )\n  }\n// ExerciseList Component\nexport default class Attractions extends Component {\n  constructor(props){\n    super(props)\n    // this.deleteExercise = this.deleteExercise.bind(this)\n    this.state={\n      attractions: []\n    };\n  }\n  componentDidMount(){\n    axios.get('http://localhost:5000/attractions/')\n      .then(response => {\n        this.setState({\n          attractions: response.data\n        })\n        console.log('this is the class project')\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  attractionsList(){\n    return this.state.attractions.map((currentAttraction) =>{\n      return <Attraction \n        exercise = {currentAttraction}\n        key={currentAttraction._id}\n      />\n    })\n  }\n  render() {\n    return (\n      <div>\n        <h3>Attractions</h3>\n        <table className=\"table\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n              <th>Website</th>\n              {/* <th>Date</th>\n              <th>Actions</th> */}\n            </tr>\n          </thead>\n          <tbody>\n            {this.attractionsList()}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport {Link} from 'react-router-dom'\n\nexport default class navbar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n                <Link to=\"/\" className=\"navbar-brand\">Cincinnati Tourism</Link>\n                <div className=\"collapse navbar-collapse\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"navbar-item\"> \n                            <Link to=\"/\" className=\"nav-link\">Home</Link>\n                        </li>\n                        <li className=\"navbar-item\"> \n                            <Link to=\"/attractions\" className=\"nav-link\">Attractions</Link>\n                        </li>\n                        {/* <li className=\"navbar-item\"> \n                            <Link to=\"/user\" className=\"nav-link\">Create User</Link>\n                        </li> */}\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Attractions from './components/attractions'\n\nimport Navbar from \"./components/navbar\"\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar/>\n        <br/>\n        <Route path=\"/\" exact/>\n        <Route path=\"/attractions\" component={Attractions} />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}